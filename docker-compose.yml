version: "3.8"

services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-siteboss}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-siteboss}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  backend-dev:
    profiles: ["dev"]
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      NODE_ENV: development
      PORT: ${API_PORT:-3001}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-siteboss}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
    depends_on:
      - db
    ports:
      - "${API_PORT:-3001}:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  frontend-dev:
    profiles: ["dev"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    env_file:
      - .env
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      WDS_SOCKET_PORT: "0"
      PORT: ${FRONTEND_PORT:-3000}
      HOST: "0.0.0.0"
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start
    restart: unless-stopped

  backend:
    profiles: ["prod"]
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-siteboss}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_SSL: ${DB_SSL:-false}
      DB_MAX_CONNECTIONS: ${DB_MAX_CONNECTIONS:-20}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      CORS_ORIGINS: ${CORS_ORIGINS}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_REQUEST_LOGGING: ${ENABLE_REQUEST_LOGGING:-true}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${API_PORT:-8089}:3001"
    restart: unless-stopped
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  frontend:
    profiles: ["prod"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: nginx
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api}
    env_file:
      - .env
    ports:
      - "${FRONTEND_PROD_PORT:-8088}:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost/ >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s

volumes:
  pgdata:
  backend_logs:
  backend_uploads:
